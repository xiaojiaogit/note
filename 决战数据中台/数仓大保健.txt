数仓笔记
C4     
开发能力：
	有基本的SQL实现能力，在没有提示或有少量提示下能实现常见SQL代码开发；有一定的业务理解能力，在少量指引下能基本理解需求方的业务需求描述；了解有关SQL的高级用法，比如开窗函数。
	
	数仓建模：
	了解Kimball维度建模思想，如维度表/事实表的概念，雪花模型/星型模型的概念；了解维度表和事实表建设的方法论，如变化维度处理方式，事实表种类；了解数据仓库分层的概念，包括但不限于DWD/DMS/DIM/ODS/DMD/DMS;了解数仓分层的ETL方式；了解数据中台概念和建模的结合。
	
数据治理：
	了解数据生命周期管理/元数据管理/数据质量管理/主数据管理的概念。
	
原理理解：
	了解Hadoop/Spark/Hive/Flink/Kafka/Druid/HBase/Redis等组件的原理。
	
工程能力：
	了解Java/Scala语言。
	
业务能力：
	通过了解业务描述可以完成指定开发任务。
	
C5       
开发能力：
有较高级的SQL实现能力，能实现常见的SQL代码开发；有良好的业务理解能力，基本理解需求方的业务需求描述；熟练使用SQL的高级用法，比如开窗函数；对SQL on hive or Spark有一定的调优经验，如数据倾斜处理。

数仓建模：
掌握Kimball维度建模思想，如维度表/事实表的概念，雪花模型/星型模型的概念；掌握维度表和事实表建设的方法论，如变化维度处理方式，事实表种类；掌握数据仓库分层的感念，包括但不限于DWD/DMS/DIM/DMD/DMS;掌握数仓分层的ETL方式；掌握数据中台概念和建模的结合。

数据治理：
	掌握数据生命周期管理/元数据管理/数据质量管理/主数据管理的概念，并将一部分概念应用到实践中。

原理理解：
	掌握Hadoop/Spark/Hive/Flink/Kafka/Druid/HBase/Redis等组件的原理。
	
工程能力：
	熟练Java/Scala/Python语言。
	
业务能力：
	熟悉具体某块业务并可以举一反三。

==========>介绍<=============
数据仓库是什么?
	是一种思维，存储、收纳、管理...
数据仓库和数据库、数据湖和数据中台的差异：
	数据库：是一个软件，是实实在在存在的，他就是一个工具
	数据仓库：他是一种概念，告诉我们该如何去干
	数据湖：美团、阿里都在轻度使用，它可以存储异构或同构的数据、可以支持update、可以实时修改、可以支持流批一体 hudl需要强依赖于spark3.0最新版本
	数据中台：数据中心化管理、构建数据体系服务业务部门 --- 资源集中、迅速套娃（业务、产品、技术的支持，给下游快速充能）
数仓需要那些组件：
	传统数据仓库-orcle-ods-dw-dmd
		工具用的是什么？ info、水壶
		传统数据仓库-gbase-南大通用 hdfs
	互联网-Hadoop、（spark、hive、tez、clickhost）、olap：麒麟、druid、flink、hudi、kafka、sqoop、datax
	离线数仓和实时数仓的介绍：
		离线和实时最大的差异 时效性和数据准确性
		数据链路（kafka，日志体系）-hdfs-计算引擎（）-hue（界面）
		kafka-flink（spark）-计算引擎-hue（界面）
	怎么保证离线和实时的数据 是一样的？以及如果出现问题 恢复数据的代价？ 和解决方案。
		8-2 80%还是做到10分钟1次
			20%重要的场景 毫秒级
			但是有些场景 没有办法做到流批一体。
数据产品有那些：
	报表相关
		BI=帆软
	自主分析平台
	a/b实验平台
	数据体系相关
		数据字典、数据指标、数据元数据管理、数据监控、数据调度、数据资产、数据地图
	用户行为相关
		用户画像、用户行为分析（用户打点分析、用户产品功能分析，漏斗分析）、用户标签（男女、高价值用户等）
完整的数据仓库该怎么搭建（你一个人呢？）？ （标准，模型，数据链路，设计思路，业务形态）
	1. 了解公司的业务，知道他们的痛点，并且快速出成绩、解决他们的痛点。
	2. 知道他们产品的体系是什么。（人是有依赖场景，一个人用a用了10年，你一下子让他用b，对不起我不换，这就需要我们依据公司现有的产品体系下开始搭建自己的数仓）
		结合当下的业务进行搭建。
	了解业务，了解业务的源是什么，介入并用运我们数据仓库的规范，建立我们相对应的模型，大数据的建模一般使用kimball多一些，整理我们的数据链路，再根据我们的大宽表设计思维，根据公司的具体业务形态，建设我们的ods-dw-dws-dws-dwm；
数据仓库的演进过程0-1，1-2，2-3的不同阶段建设方向：
	为什么都按照标准的数据仓库搭建后面还有那么多问题？
		0-1：幼儿期
			我们需要做什么？
				业务为前提
				制订数据仓库规范 --- 元数据规范
				搭建了数据仓库模型 --- 表的方式
				划分好数据的分层
					ods1层
						ods层对接日志，mysql第三方数据-数据安全相关的，格式有（json,log,异结构，同结构），数据有敏感不敏感的数据。
					ods2层 高等级加密区
					ods 不做解析，保证原数据体貌。
					
					DIM=维度层 组合维度信息-一对一（数据来自于业务库）
					
					Dw-ods的数据-解析出来 并整理相关的字典体系和维度体系
					Dw-ods的数据-解析+清洗 会将没有解析的key 按照json的格式存储在特定的字段。
					
					Dw_DMD-DMS=轻度抽象-轻度汇总，为了做主题域
					Dmd-dms也好，都是为了抽象维度-轻度汇总-降维（维度退化）
						A=小明
						B=超市
						C=拉菲
						小明去超市买拉菲
						降维：小明（那家公司，什么职位）去超市（哪里的超市，什么超市，超市什么等级）买拉菲（什么酒多少价位，品牌，年份）
					ads=重度汇总-业务域
					app=业务使用
						
				对接数据-解析数据-入库数据-sql-报表开发
				不断的对接业务、分析、产品，逐渐的成为sqlbay
		1-2：成长期
			按部就班-抽象
			产品化
			业务自己去拉数据，自己去分析数据，自己去解析数据
			bi平台+自主分析平台（数据问题，数据质量问题，数据指标问题）
	
数据仓库人员要求：
	数仓（离线+实时，数据基础，数据体系建设）
		什么是业务事实: 度量
		可计算的数据我们就称为 度量  钱、收入、明细
		年月日是粒度吗？粒度可以理解为相关性
		我可以给你赋予的并且有关系性的关联=粒度
		例如：小明去京东下了一个订单，买了一台笔记本
			订单=笔记本（商品）
			小明=人-用户
			京东=购物平台-维度
			订单=订单-事实
			一台=种类-维度
			电脑=商品-维度
		事务事实表-多事务事实表，无事务事实表
		周期性快照事务事实表-一周收入，一周的lty
		累计性快照事实表-生命周期，派送时间-派送完成
		划分主题最根本的是做什么：便于分析，做了一个数据打包（认清边界）
	数据分析（a/b实验分析，漏斗转化，分类统计，业务功能问题等）
	数据挖掘（基础算法和主流算法）
	数据产品（产品思维）
	运营+商业化（业务思维）
	语言 java，python，sql
	


>>>>>>>>>>>>>>>>业务数据仓库<<<<<<<<<<<<<<<<<
==========>数据建模方法<=============
维度模型：
	维度建模的前身就是星座模型，基于多个星座模型组成的一个大宽表

Kimball数据模型架构------->
星型模型：
	多张维度表，一张事实表，维度与维度没有任何关系，查询性能要好一些，储存有冗余的。星型模型使用的比较多，作为OLAP多维度数据库的基础。
星座模型：
	星型模型的扩充，多张事实表组成，维度表唯一，且没有关系。
雪花模型：
	当有一个或多个维表没有直接连接到事实表上，而是通过其他维表连接到事实表上时，其图解就像多个雪花连接在一起，故称雪花模型。雪花模型是对星型模型的扩展。
	
阿里巴巴数据模型------------> 
	优点：面向业务，速度分析，速度取数，逻辑分明，层次简单。
	缺点：逐渐庞大的业务体系的基础，在于底层表之间的维护。
ods
	操作数据层
	1. 误差别同步数据源表到数据仓库
	2. 根据数据业务需求及契合和审计要求保留历史数据
	3. 清洗数据
cdm
	公共维度模型层
	1. 存放明细事实数据，维表数据及公共指标汇总数据
	2. 采用一些维度退化手段，将维度退化至事实表中，减少事实表和维度表的关联，提高明细数据表的易用性
	3. 同时在汇总数据层，加强指标的维度退化，采取更多的宽表化手段构建公共指标数据层，提升公共指标的服用性，减少重复加工。
		dwd --> 分明细数据层
		dws --> 汇总数据层
ads --> 应用数据层

===============概论==================
	数据来源
		无边界(异结构) ---> json、json-list、数组、url、实时序列（无schema）
		有边界
		无序
	建设表：
		表+字段注释
		表+字段级别
		表的使用方
		表大小+表增量=表字段权重-表生命周期    表大小-表增量-生命周期-表字段权重    一张表：缺失字段对表的业务影响的权重
		表上下游关系
		表热度      下游使用次数<>当前bu    当bu查询=上游使用次数
		表=粒度（我是小时更新，还是分钟更新，周、月等）
		业务体系-任务搭建手册：
			1：核心+业务依赖+广度(业务层次)+深度(单字段影响全局)
				部门
					一级部门 - 使用量40%
					二级部门 - 使用量20%
					基础部门 - 使用量10%
			2：核心+业务依赖
			3：核心
			4：一般
			5：二般
			资源  --- 数据量  --- 优先级  --- 影响程度

互联网数据仓库
	业务变化快
		开发周期快-敏捷开发
		业务复杂
		推翻自己
	数据量庞大-t级别以上甚至达到p级别
	建模方式-多样化-混合建模
		维度（他只是理论层面的，只是个思想）
		dv
		星座
		雪花
		e-r
	面向业务
		产品
		分析
		运营
		数据开发人员  --- 模型
		面向自己
			什么是业务<=产品
				基础数据
				业务逻辑
				数据口径
				基础维度
				专业知识80%
					什么是电商
						直通车
						客单价
						商品
					什么是广告
						adx
						dsp
					什么是外卖
						配送系统
						人员管理系统
						店家
					什么是游戏
						客户体系
						消费体系
					什么是银行
						信用卡中心
						...
业务数据仓库：
	中台体系下 --- 单业务 --- 1对1体系搭建 --- 定制化开发
	数据跟业务的结合度 --- 业务主导数据 --- 用业务角度-数据需求-分析需求-提供数据解决方案
											业务分支-广告
												广告-adx
												广告-dsp
												广告-crt
												广告-实验
												广告-互动
												广告投放系统
												广告素材
												客户端
												服务端
												买量
											成果：bu内部-无数据孤岛 --- 完整-业务分支-数据打通
														数据一体化
														数据服务化
														数据指标化
														小头爸爸找大头儿子-标志化

==================>数据ETL加工处理<===================
数据同步
	sqoop
	datax
	
数据清理
数据加载

================>数仓模型设计<==================
kimball模型方法论：
数据操作层（ods） --- 将原始数据几乎无处理的存放在数据仓库系统，结构上与源系统基本保持一致，是数据仓库的数据准备区。
公共维度层（dim） --- 基于维度建模理念思想，建立整个企业的一致性维度。降低数据计算口径和算法不统一风险。
模型层
	数据明细层（dwd） --- 存放ods层解析后的数据，不对外开放使用，只做为中间层。
	通用明细层（dmd） --- 以业务过程做为建模驱动，基于每个具体的业务过程特点，构建最细粒度的明细层事实表。使用宽表化手法，把某些重要维度属性字段做适当冗余，退化->事实表。
通用层
	通用汇总层（sda或dms） --- 基于上层应用和产品的指标需求，抽取出公用粒度的汇总指标，构建命名规范、口径一致的统计指标，为上层提供公共指标。该层指标主要与派生指标为主。
应用层
	数据应用层（ads） --- 面向特定应用加工出来的个性化指标数据。 

缓慢变化维（业内有三种解决方式）： 覆盖旧记录，添加新记录，添加新字段


================>数仓建模实践<==================
第一步： 做需求调研（业务背景是什么？）
第二步： 数据探察
	我们有没有这个数据，如果有怎么做，
	如果没有，你的数据在哪里？找谁要，你的字段是什么，字段含义是什么。
第三步： 模型设计 
	怎么设计模型？ 采用新模型还是老模型的添加，是新增还是维护。
第四步： 目标是什么
	矩阵-业务抽象 和 一致性维度
第五步： 协作维度建模研讨
第六步：维度设计过程
	选择业务
	划分粒度
		原子粒度
		同一事实表不混用粒度
	确认维度
		星型模型-维度退化
		雪花模型
	确认事实
		事务事实表
		周期事实快照表
		累计快照事实表
第七步： 数据域划分
	构建总线矩阵
	明确统计指标
第八步： 建立物理模型
	定义规范
		构建一致性逻辑维度及维度属性
		构建一致性度量及指标（原子指标、派生指标）

================>生态圈<==================




tez计算 是什么